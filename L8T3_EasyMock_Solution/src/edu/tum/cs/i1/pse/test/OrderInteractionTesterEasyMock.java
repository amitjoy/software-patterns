package edu.tum.cs.i1.pse.test;import static org.easymock.EasyMock.createNiceMock;import static org.easymock.EasyMock.expect;import static org.easymock.EasyMock.expectLastCall;import static org.easymock.EasyMock.replay;import static org.easymock.EasyMock.verify;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.easymock.EasyMockRunner;import org.easymock.Mock;import org.easymock.TestSubject;import org.junit.Before;import org.junit.Ignore;import org.junit.Test;import org.junit.runner.RunWith;import edu.tum.cs.i1.pse.Order;import edu.tum.cs.i1.pse.OrderImpl;import edu.tum.cs.i1.pse.Warehouse;@RunWith(EasyMockRunner.class)public class OrderInteractionTesterEasyMock {	private static String TALISKER = "Talisker";	@Mock	private Warehouse warehouseMock;	@TestSubject	Order order = new OrderImpl(TALISKER, 50);	@Before	public void setUp() throws Exception {//		warehouseMock = createNiceMock(Warehouse.class);	}	@Test	public void testFillingRemovesInventoryIfInStock() {		expect(warehouseMock.hasInventory(TALISKER, 50)).andReturn(true);//		expect(warehouseMock.hasInventory(TALISKER, 50)).andThrow(new RuntimeException("Exception occurred"));//		expectLastCall().times(2);//		expectLastCall().times(2, 20);//		expectLastCall().anyTimes();//		expectLastCall().atLeastOnce();		warehouseMock.remove(TALISKER, 50);		replay(warehouseMock);		order.fillOut(warehouseMock);		assertTrue(order.isFilled());		verify(warehouseMock); // Not necessary to be present, only to be used								// whether the mock object is called	}	@Test	@Ignore	public void testFillingDoesNotRemoveIfNotEnoughInStock() {		Order order = new OrderImpl(TALISKER, 70);		expect(warehouseMock.hasInventory(TALISKER, 70)).andReturn(false);		replay(warehouseMock);		order.fillOut(warehouseMock);		assertFalse(order.isFilled());		verify(warehouseMock);	}}